name: Deploy

on:
  push:
    branches:
      - main
      - update-deploy

permissions:
  contents: write

env:
  FUNCTION_NAME: frazer

jobs:
  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create Lambda package
        run: |
          python -m pip install --upgrade pip
          make lambda
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:  ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to AWS Lambda
        run: |
          # Update the Lambda function code
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://path/to/deployment.zip
      
          # Wait for deployment to complete
          echo "Waiting for Lambda update to complete..."
          aws lambda wait function-updated --function-name $FUNCTION_NAME
      
          # Get the function status
          STATUS=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.LastUpdateStatus' --output text)
      
          if [[ "$STATUS" == "Successful" ]]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed with status: $STATUS"
            exit 1
          fi

      - name: Build frontend
        env: 
          SENTENCE_API_URL: ${{ secrets.SENTENCE_API_URL }}
        run: |
          pip install -e .
          make build-site

      - name: Deploy site
        run: |
          aws s3 cp site/frazer.html s3://${{ secrets.BUCKET }}/frazer.html --acl public-read

      - name: Extract Version
        id: get_version
        run: |
          VERSION=$(python -c "import frazer; print(frazer.__version__)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          echo "Creating tag v$VERSION"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}